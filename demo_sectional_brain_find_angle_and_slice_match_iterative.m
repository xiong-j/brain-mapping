clc;close all; clear all;
run('vlfeat-0.9.21/toolbox/vl_setup.m')
filename='cea41_masked.tif';
% tif file that contains your experimental images, need to be preprocessed
% to remove noisy non-zero intensity background, and remove easily detached
% regions that are not consistent in 3D.
% default order: posterior - anterior
brainname='cea41';
% saves the output files starting with the brain name
experimental_thickness=50; 
% thickness of your slice
expresolution=5.1; 
% resolution of pixel in experimental data
begin_yangle=0; 
% angle to begin the iterative angle search with, this angle is the angle
% around the left-right axis
atlas_folder='all_masked';
% this atlas folder contains the preprocessed sectional atlas, the atlas
% well includes the dorsal raphe region. The cortex and lobes are removed
% because they are easily missing in our experimental slice, so we removed
% them all. The rotated atlas will be saved in this same folder, so for
% another experimental brain you don't need to compute the rotated brain
% again. naming norm: tatlas_xangle_yangle.tif or tatlas_xangle_yangle_negative.tif
% if you use sectional atlas, remember what the starting and ending slices
% are
good_quality_indices= [2 5 7 11 13 15 18 21 25 28 30 32];
% indices of good quality images. if not specified (input as []), the program automatically use every third
% slice
thresh = 0.2; % spatial flexibility, don't change if not sure
%% output and output files:
% x - rotation angle around the dorsal ventral axis
% y - rotation angle around the left-right axis
% correspondences - a vector of matching indices for each experimental slice in the experimental stack
% tif file - qualitative result: matching pairs generated by our program
% mat file - saves x,y,correspondences
%% instructions on how to use the result
% in the atlas folder, there are many rotated atlas files. In each file, it
% contains two variables: 1. tatlas (the rotated atlas volume). 2. origin
% (4 dimensions (size of tatlas, plus 3), this varibale saves in the unrotated (sectional atlas) each
% volxel in the rotated atlas comes from. so if you want to know where
% (coordinate x, coordinate y, in slice z in the rotated atlas) is in the
% unrotated atlas, simple read origin(x,y,z,:) This variable allows you to
% combine our algorithm with manual or other 2D registration algorithms or
% do other flexible tasks.
%% do not modify under this line
% name of the output mat file to save the diffs matrix 
% with this matrix you can see a clear pattern: left is more negative and
% right is more positive. The best angle should be the angle that is closer
% to zero at the flipping point. If this pattern is clear then it means our
% algorithm is confident about the output; if not, then you will need to
% better preprocess the experimental dataset or/and the (sectional) atlas.
%% 
[maskfile,brainfile]=clean_data_function(filename);
brainfile=brainfile./255;
if isempty(good_quality_indices )
    indices=1:3:num_experimental;
else
    indices=good_quality_indices;
end
[y,x,matching1,matching2,startslice,endslice]=find_angle_iterative(experimental_thickness,maskfile,brainfile,begin_yangle,...
    indices,atlas_folder,expresolution)
[tif_file,mat_file]=find_slice_matches_function(experimental_thickness, brainfile, x,y, ...
    maskfile, expresolution,brainname,atlas_folder,indices,...
    matching1,matching2,startslice,endslice,thresh)